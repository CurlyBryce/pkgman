#!/bin/bash
# pkgman--package manager--a package manager unifier

# Check if running as root
function checkroot() {
  if [[ "$EUID" == 0 ]]; then
    echo -e "Do not run this script as root!\nExiting";
    exit 1
  fi
}

function main() {
  # Start Init
  # Init/set debug info
  version="0.1" # DO NOT CHANGE THIS VALUE
  manager=$(managersel)
  m_prefix=""
  options=""

  # Begin
  # Parse options then remove them
  parse_options "$@"
  shift $?

  # Parse commands
  parse_commands "$@"
}

function parse_options() {
  # Init option counter
  counter=0

  # Loop through all the arguments/options
  for x in "$@"; do
    # Add one to the counter
    counter=$(($counter + 1))
    # Check if x is an option and remove 1 from counter
    [[ $x != -? ]] && counter=$(($counter - 1)) && break;
    # Add arg to the options list
    options="$options $x"

    # Check for endarg
    [[ $x == "--" ]] && break;

    # Test options
    case $x in
      -s) m_prefix="sudo $m_prefix";;
      *) info unkopt $x && exit 1;;
    esac;
  done

  # Return counted options
  return $counter
}

function parse_commands() {
  # Check for args
  [[ ! $1 ]] && info usage && exit 1;
  # Check for manager
  [[ ! $manager ]] && info noman;
  # Remove first arg for passthrough
  pass="${@:2}"

  # Parse commands
  case $1 in
    p|passthrough) $m_prefix $manager $pass;;
    u|update) c_update $pass;;
    s|search) c_search $pass;;
    i|install) c_install $pass;;
    d|debug) info info;;
    h|help) info $2;;
    *) info unkarg $1;;
  esac
  exit 1
}

# Info pages
function info() {
  # Check for no args
  [[ ! $1 ]] && info usage && info commands && exit 1;

  case $1 in
    # Debugging
    info|h|help) echo -e "Version\t\t${version}\nManager\t\t${manager}\nManager Prefix\t${m_prefix}\nOptions\t\t${options}";;

    # Unknowns
    unkarg) echo -e "Unknown argument \"$2\"";; # Unknown argument
    unkopt) echo -e "Unknown option \"$2\"";; # Unknown option
    unkcom) echo -e "Unknown command \"$2\"";; # Unknown command
    unksub) echo -e "Unknown subcommand \"$2\"";; # Unknown subcommand
    unkman) echo -e "Unknown manager \"$manager\"";; # Unknown manager

    # Help
    usage) echo -e "Usage: pkgman [options] [--] <command> [subcommand]";; # Program usage
    commands) echo -e "Commands:\nh|help [command]\tShow help\nd|debug\t\t\tShow debugging info\np|passthrough\t\tPassthrough to the manager\nu|update\t\tUpdate local package repositories\ns|search\t\tSearch for repository packages\ni|install";; # Commands list
    u|update) echo -e "Update Command:\nRun without a subcommand to update\nh|help\t\tShow this page";; # Command update
    s|search) echo -e "Search Command:\nSubcommand is the search string";; # Command search
    i|install) echo -e "Install Command:\nSubcommand is the packages to install";; # Command install

    # Error
    noman) echo "No manager found!";; # No manager
    unimp) echo "Not implemented";; # Not implemented
    *) echo "no known help";; # Unknown help page
  esac
}

# Command update
function c_update() {
  # Check for subcommand
  if [[ ! $1 ]]; then
    # Update repos
    echo "Updating repositories"
    case $manager in
      pacman) sudo $manager -Sy;;
      apt) sudo $manager update;;
      *) info unkman;;
    esac
    exit 1
  fi

  # Parse subcommand
  case $1 in
    h|help) info update;;
    *) info unkarg $1;;
  esac
}

function c_search() {
  # Check for subcommand
  if [[ $1 ]]; then
    # Update repos
    echo "Searching repositories"
    case $manager in
      pacman) $manager -Ss ${@};;
      apt) $manager search ${@};;
      *) info unkman;;
    esac
    exit 1

    else
      info search;
  fi
}

function c_install() {
  # Check for subcommand
  if [[ $1 ]]; then
    # Update repos
    echo "Installing packages"
    case $manager in
      pacman) sudo $manager -S ${@};;
      apt) sudo $manager install ${@};;
      *) info unkman;;
    esac
    exit 1

    else
      info install;
  fi
}

#function c_upgrade() {}
#function c_remove() {}

# Find or select the installed package manager
function managersel() {
  [[ $MANAGER ]] && echo "$MANAGER" && return;
  [[ -f /usr/bin/apt ]] && echo "apt" && return;
  [[ -f /usr/bin/pacman ]] && echo "pacman" && return;
}

checkroot && main "$@"
